---
# defaults file for httpd_core

httpd_basedir: /opt
httpd_certdir: "{{ httpd_basedir }}/ssl"

# role-specific variables
httpd_user: htadmin
httpd_group: htadmin

httpd_osver: "{{ ansible_os_family }}_{{ ansible_distribution_major_version }}"

httpd_dirmode: "0750"
httpd_mode: "0640"

httpd_servicename: httpd
httpd_hostname: "{{ inventory_hostname }}"

# The directories that the httpd instance will use
httpd_serverroot: "{{ httpd_basedir }}/httpd"
httpd_conf_dir: "{{ httpd_serverroot }}/conf"
httpd_confd_dir: "{{ httpd_serverroot }}/conf.d"
httpd_vhost_dir: "{{ httpd_serverroot }}/vhosts"
httpd_moduleconf_dir: "{{ httpd_serverroot }}/conf.modules.d"
httpd_custom_modules_dir: "{{ httpd_serverroot }}/custom_modules"
httpd_log_dir: "{{ httpd_serverroot }}/logs/httpd"

# Use extended core modules: additional, commonly-used modules
# that are not part of the minimum set of modules needed to support the
# conf files provided by this module. Roles that build off this one for 
# specific use cases should consider setting this to false and provide
# its own extended set of modules based off the extended core file,
# to reduce the possibility of conflicts.
# If you add to this role (e.g) security headers settings or other core configs
# that require additional modules, please add those to the 00-base file.
httpd_extendedcore: true

# system run file location and module install directory
# unlike the above, these are the general system locations to target
# instead of instance-specific locations
httpd_module_dir: /usr/lib64/httpd/modules

# For RHEL 5: overriden in vars files to be RHEL5 default of /var/run
httpd_run_dir: /var/run/httpd

httpd_default_docroot_dir: "{{ httpd_basedir }}/docroot"
httpd_default_docroot_group: "{{ httpd_group }}"
httpd_default_docroot_mode: "{{ httpd_dirmode }}"

# Timeout and KeepAlive settings
httpd_timeout: '60'
httpd_keepalive: 'On'
httpd_keepalive_maxreqs: '100'
httpd_keepalive_timeout: '5'
httpd_charset_default: 'UTF-8'

httpd_default_vhost: true

# if true, default plaintext vhost will simply redirect to ssl
# requires httpd_allow_plaintext=true,
# or else there won't be a non-ssl default vhost
httpd_default_vhost_ssl_redirect: true

# allow a plaintext (non-ssl) listener to be opened
httpd_allow_plaintext: true
httpd_plaintext_port: 80

# enable use of ssl
httpd_use_ssl: true
httpd_ssl_port: 443

httpd_ssl_protocols: "all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1"
httpd_ssl_ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
httpd_ssl_sessioncache: "shmcb:/var/cache/mod_ssl/scache(512000)"
httpd_ssl_sessioncache_timeout: '300'

httpd_defaultcert: "{{ httpd_certdir }}/{{ httpd_hostname }}.crt"
httpd_defaultkey: "{{ httpd_certdir }}/{{ httpd_hostname }}.key"
#For RHEL 5: overriden in vars files to be RHEL5 default of /etc/pki/tls
httpd_defaultCA: "/etc/pki/tls/certs"

# The value set at the global level.
# Virtual hosts for services that need a different support contacts can
# set a contact in their own vhost entry.
httpd_serveradmin: admin@localhost
